{"version":3,"sources":["../src/ruleInterpreter.js"],"names":["validateIOProperties","rule","result","valid","errors","validProperties","input","command","protocol","output","pathway","undefined","push","property","hasOwnProperty","validateRule","map","console","log","error"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,SAASA,oBAAT,CAA8BC,IAA9B,EAAoC;AAClC,MAAIC,SAAS;AACXC,WAAO,IADI;AAEXC,YAAQ;AAFG,GAAb;;AAKA,MAAMC,kBAAkB;AACtBC,WAAO;AACLC,eAAS,SADJ;AAELC,gBAAU;AAFL,KADe;AAKtBC,YAAQ;AACNF,eAAS,SADH;AAENC,gBAAU;AAFJ;AALc,GAAxB;;AAWA,OAAK,IAAIE,OAAT,IAAoBL,eAApB,EAAqC;AACnC,QAAIJ,KAAKS,OAAL,MAAkBC,SAAtB,EAAiC;AAC/BT,aAAOC,KAAP,GAAe,KAAf;AACAD,aAAOE,MAAP,CAAcQ,IAAd,+BAA+CF,OAA/C;AACD;AACD,SAAK,IAAIG,QAAT,IAAqBZ,KAAKS,OAAL,CAArB,EAAoC;AAClC,UAAI,CAACL,gBAAgBC,KAAhB,CAAsBQ,cAAtB,CAAqCD,QAArC,CAAL,EAAqD;AACnDX,eAAOC,KAAP,GAAe,KAAf;AACAD,eAAOE,MAAP,CAAcQ,IAAd,uBAAsCC,QAAtC;AACD;AACF;AACF;AACD,SAAOX,MAAP;AACD;;AAED,SAASa,YAAT,CAAsBd,IAAtB,EAA4B;AAC1B,MAAIC,SAASF,qBAAqBC,IAArB,CAAb;AACA,MAAI,CAACC,OAAOC,KAAZ,EAAmB;AACjBD,WAAOE,MAAP,CAAcY,GAAd,CAAkB;AAAA,aAASC,QAAQC,GAAR,aAAsBC,KAAtB,CAAT;AAAA,KAAlB;AACA,WAAO,KAAP;AACD,GAHD,MAGO;AACLF,YAAQC,GAAR,CAAY,yBAAZ;AACD;AACD,SAAO,IAAP;AACD;;kBAEcH,Y","file":"ruleInterpreter.js","sourcesContent":["import irPowerToggleToCEC from './irPowerToggleToCEC'\r\nimport initRuleDeclarations from './ruleRunner'\r\n\r\nfunction validateIOProperties(rule) {\r\n  let result = {\r\n    valid: true,\r\n    errors: []\r\n  }\r\n\r\n  const validProperties = {\r\n    input: {\r\n      command: 'command',\r\n      protocol: 'protocol'\r\n    },\r\n    output: {\r\n      command: 'command',\r\n      protocol: 'protocol'\r\n    }\r\n  }\r\n\r\n  for (let pathway in validProperties) {\r\n    if (rule[pathway] === undefined) {\r\n      result.valid = false\r\n      result.errors.push(`Rule does not contain an ${pathway} definition`)\r\n    }\r\n    for (let property in rule[pathway]) {\r\n      if (!validProperties.input.hasOwnProperty(property)) {\r\n        result.valid = false\r\n        result.errors.push(`Input property '${property}' is not valid`)\r\n      }\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\nfunction validateRule(rule) {\r\n  let result = validateIOProperties(rule)\r\n  if (!result.valid) {\r\n    result.errors.map(error => console.log(`ERROR: ${error}`))\r\n    return false\r\n  } else {\r\n    console.log('Rule passes validation!')\r\n  }\r\n  return true\r\n}\r\n\r\nexport default validateRule"]}